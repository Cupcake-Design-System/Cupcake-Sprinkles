
/// Returns the color value for a given color name and group in extended palette.
/// @param {String} $value [primary] - The color's base.
/// @param {Number} $range [7] - The darkness/lightness of the color. Defaults to 7. The higher the number, the darker the color.
/// @return {Color} - The color value.
@function color-extended($value: primary, $range: 7) {
  $fetched-color: config($color-extended, $value, $range);

  @if type-of($fetched-color) != null {
    @return $fetched-color;
  } @else {
    @error 'Color #{value} - #{$range} not found.';
  }
}

$color-extended: (
  
  'cyan': (
    0: $color-cyan-0,
    1: $color-cyan-1,
    2: $color-cyan-2,
    3: $color-cyan-3,
    4: $color-cyan-4,
    5: $color-cyan-5,
    6: $color-cyan-6,
    7: $color-cyan-7,
    8: $color-cyan-8,
    9: $color-cyan-9
  ),

  'grape': (
    0: $color-grape-0,
    1: $color-grape-1,
    2: $color-grape-2,
    3: $color-grape-3,
    4: $color-grape-4,
    5: $color-grape-5,
    6: $color-grape-6,
    7: $color-grape-7,
    8: $color-grape-8,
    9: $color-grape-9
  ),

  'indigo': (
    0: $color-indigo-0,
    1: $color-indigo-1,
    2: $color-indigo-2,
    3: $color-indigo-3,
    4: $color-indigo-4,
    5: $color-indigo-5,
    6: $color-indigo-6,
    7: $color-indigo-7,
    8: $color-indigo-8,
    9: $color-indigo-9
  ),

  'lime': (
    0: $color-lime-0,
    1: $color-lime-1,
    2: $color-lime-2,
    3: $color-lime-3,
    4: $color-lime-4,
    5: $color-lime-5,
    6: $color-lime-6,
    7: $color-lime-7,
    8: $color-lime-8,
    9: $color-lime-9
  ),

  'orange': (
    0: $color-orange-0,
    1: $color-orange-1,
    2: $color-orange-2,
    3: $color-orange-3,
    4: $color-orange-4,
    5: $color-orange-5,
    6: $color-orange-6,
    7: $color-orange-7,
    8: $color-orange-8,
    9: $color-orange-9
  ),

  'pink': (
    0: $color-pink-0,
    1: $color-pink-1,
    2: $color-pink-2,
    3: $color-pink-3,
    4: $color-pink-4,
    5: $color-pink-5,
    6: $color-pink-6,
    7: $color-pink-7,
    8: $color-pink-8,
    9: $color-pink-9
  ),

  'teal': (
    0: $color-teal-0,
    1: $color-teal-1,
    2: $color-teal-2,
    3: $color-teal-3,
    4: $color-teal-4,
    5: $color-teal-5,
    6: $color-teal-6,
    7: $color-teal-7,
    8: $color-teal-8,
    9: $color-teal-9
  ),

  'violet': (
    0: $color-violet-0,
    1: $color-violet-1,
    2: $color-violet-2,
    3: $color-violet-3,
    4: $color-violet-4,
    5: $color-violet-5,
    6: $color-violet-6,
    7: $color-violet-7,
    8: $color-violet-8,
    9: $color-violet-9
  ),
);
  

/// Returns the color value for a given color name and group.
/// @param {String} $value [primary] - The color's base.
/// @param {Number} $range [7] - The darkness/lightness of the color. Defaults to 7. The higher the number, the darker the color.
/// @return {Color} - The color value.
@function color($value: primary, $range: 7) {

  @if $value == black {
    @return $color-black;
  } @else if $value == white {
    @return $color-white;
  } @else if $value == gray {
    @return config($color, 'gray', $range);
  } @else if {
    @return config($color, $value, $range);
  } @else {
    @error 'Color #{value} - #{$range} not found.';
  }
}

$color: (
  
  'danger': (
    0: $color-danger-0,
    1: $color-danger-1,
    2: $color-danger-2,
    3: $color-danger-3,
    4: $color-danger-4,
    5: $color-danger-5,
    6: $color-danger-6,
    7: $color-danger-7,
    8: $color-danger-8,
    9: $color-danger-9
  ),

  'gray': (
    0: $color-gray-0,
    1: $color-gray-1,
    2: $color-gray-2,
    3: $color-gray-3,
    4: $color-gray-4,
    5: $color-gray-5,
    6: $color-gray-6,
    7: $color-gray-7,
    8: $color-gray-8,
    9: $color-gray-9
  ),

  'primary': (
    0: $color-primary-0,
    1: $color-primary-1,
    2: $color-primary-2,
    3: $color-primary-3,
    4: $color-primary-4,
    5: $color-primary-5,
    6: $color-primary-6,
    7: $color-primary-7,
    8: $color-primary-8,
    9: $color-primary-9
  ),

  'success': (
    0: $color-success-0,
    1: $color-success-1,
    2: $color-success-2,
    3: $color-success-3,
    4: $color-success-4,
    5: $color-success-5,
    6: $color-success-6,
    7: $color-success-7,
    8: $color-success-8,
    9: $color-success-9
  ),

  'warning': (
    0: $color-warning-0,
    1: $color-warning-1,
    2: $color-warning-2,
    3: $color-warning-3,
    4: $color-warning-4,
    5: $color-warning-5,
    6: $color-warning-6,
    7: $color-warning-7,
    8: $color-warning-8,
    9: $color-warning-9
  ),
);
  

/// Returns the font size for a given size definition.
///
/// @param {String} $value - The font size.
/// @return {Number} The font-size for the given definition.
@function font-size($value: md) {
  $fetched-font-size: map-get($font-body, $value);

  @if type-of($fetched-font-size) != null {
    @return $fetched-font-size;
  } @else {
    @error 'Font size not found.';
  }
}

$font-body: (
  xs: $font-body-xs,
  sm: $font-body-sm,
  md: $font-body-md,
  lg: $font-body-lg,
  xl: $font-body-xl,
  xxl: $font-body-xxl,
);

/// Returns the font family for a given definition.
///
/// @param {String} $value - The font key.
/// @return {Number} The font-family for the given definition.
@function font($value: sans) {
  $fetched-font: map-get($font-family, $value);

  @if type-of($fetched-font) != null {
    @return $fetched-font;
  } @else {
    @error 'Font family #{$value} not found.';
  }
}

$font-family: (
  sans: $font-family-sans,
  mono: $font-family-mono,
);

$font-header: (
  xs: $font-header-xs,
  sm: $font-header-sm,
  md: $font-header-md,
  lg: $font-header-lg,
  xl: $font-header-xl,
  xxl: $font-header-xxl,
);

/// Returns the font weight for a given weight definition.
///
/// @param {String} $weight - The font weight.
/// @return {Number} The font-weight for the text-weight.
@function font-weight($value: normal) {
  $fetched-font-weight: map-get($font-weight, $value);

  @if type-of($fetched-font-weight) != null {
    @return $fetched-font-weight;
  } @else {
    @error 'Font weight not found.';
  }
}

$font-weight: (
  bold: $font-weight-bold,
  semibold: $font-weight-semibold,
  normal: $font-weight-normal,
  light: $font-weight-light,
);

/// Returns the line height for a given range.
///
/// @param {Number} $range - The font style.
/// @return {Number} The line-height for the text-style.
@function line-height($value: normal) {
  $fetched-line-height: map-get($line-height, $value);

  @if type-of($fetched-line-height) != null {
    @return $fetched-line-height;
  } @else {
    @error 'Line height not found.';
  }
}

$line-height: (
  normal: $line-height-normal,
  default: $line-height-default,
  condensed: $line-height-condensed,
);

/// Returns the radius value for a given variant.
///
/// @param {String} $radius - how much space do you need.
/// @return {Number} The spacing for the variant in px.
@function radius($value: md) {
  $fetched-value: map-get($radius, $value);

  @if type-of($fetched-value) == number {
    @return $fetched-value;
  } @else {
    @error 'Radius variant #{$radius} not found.';
  }
}

$radius: (
  0: $radius-0,
  square: $radius-square,
  sm: $radius-sm,
  md: $radius-md,
  lg: $radius-lg,
  round: $radius-round,
  pill: $radius-pill,
);

/// Returns the shadow for the specified depth
///
/// @param {String} $value - The shadow's depth.
/// @return {List} The shadow value.
@function shadow($value: sm) {
  $fetched-value: map-get($shadow, $value);

  @if type-of($fetched-value) == list {
    @return $fetched-value;
  } @else {
    @error 'Shadow variant #{$depth} not found.';
  }
}

$shadow: (
  xs: $shadow-xs,
  sm: $shadow-sm,
  md: $shadow-md,
  lg: $shadow-lg,
  xl: $shadow-xl,
);

/// Returns the spacing value for a given variant.
///
/// @param {String} $space - how much space do you need.
/// @return {Number} The spacing for the variant in px.
@function space($value: md) {
  $fetched-value: map-get($space, $value);

  @if type-of($fetched-value) == number {
    @return $fetched-value;
  } @else {
    @error 'Spacing variant #{$space} not found.';
  }
}

$space: (
  0: $space-0,
  xxs: $space-xxs,
  xs: $space-xs,
  sm: $space-sm,
  md: $space-md,
  lg: $space-lg,
  xl: $space-xl,
);
